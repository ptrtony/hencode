apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply from: 'config.gradle'

import groovy.json.JsonSlurper

def releaseDate() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("GMT+8:00"))
}

def releaseTime() {
    return new Date().format("yyyyMMddHHMM", TimeZone.getTimeZone("GMT+8:00"))
}

android {
    compileSdkVersion 28
    def currentVersionCode = getVersionCode()
    def currentVersionName = getVersionName()
    defaultConfig {
        applicationId "com.zhaofan.encoder"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode currentVersionCode
        versionName currentVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    useLibrary 'org.apache.http.legacy'
    //输出apk Name
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //获取当前时间的"YYYY-MM-dd"格式。
            def createTime = new Date().format("yyyy-MM-dd_HH-mm-ss", TimeZone.getTimeZone("GMT+08:00"))
            def fileName = "${variant.productFlavors.name}_v${productFlavors.versionName}_" +
                    "${productFlavors.versionCode}_[${createTime}]_${productFlavors.applicationId}_${variant.buildType.name}.apk"
            outputFileName = fileName
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation("com.squareup.okhttp3:okhttp:3.14.1")

}

def getVersionCode() {
    def versionFile = file('version.properties')
    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['build.number'].toInteger()
        println('Current version code is ' + versionCode.toString())
        def runTasks = gradle.startParameter.taskNames
        for (String task : runTasks) {
            // 我这里认为执行“assemble”和非“debug”的任务就是执行“release”的任务\
            if (task.contains("assemble") && !task.contains("Debug")) {
                versionCode++
                versionProps['build.number'] = versionCode.toString()
                versionProps.store(versionFile.newWriter(), null)
                println('Updated version code to ' + versionCode.toString())
                return versionCode
            }
        }
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }

}

def getVersionName() {
    def versionFile = file('version.properties')
    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionMajor = versionProps['version.major']
        def versionMinor = versionProps['version.minor']
        Process process = "git rev-list --count HEAD".execute()
        process.waitFor()
        def svnVersion = process.getText().toInteger()
        Process process2 = "git describe --always".execute()
        process2.waitFor()
        def sha1 = process2.getText().trim()
        def versionName = "." + svnVersion// + "_" + sha1
        println('Current VersionName code is ' + versionName + "_" + sha1)
        return versionName
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

def getPackageConfig() {
    def jsonFile = file('../app/src/main/assets/packageconfig.json')
    if (jsonFile.exists()) {
        def slurped = new JsonSlurper()
        def json = slurped.parseText(jsonFile.text)
        return json
    } else {
        throw new GradleException("Could not find packageconfig.json!")
    }
}
crashlytics {
    enableNdk true
    androidNdkOut 'src/main/obj'
    androidNdkLibsOut 'src/main/libs'
}